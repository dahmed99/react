import com.amazonaws.auth.WebIdentityTokenCredentialsProvider;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.secretsmanager.AWSSecretsManager;
import com.amazonaws.services.secretsmanager.AWSSecretsManagerClientBuilder;
import com.amazonaws.services.secretsmanager.model.GetSecretValueRequest;
import com.amazonaws.services.secretsmanager.model.GetSecretValueResult;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.util.Base64;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AwsSecretsManagerTest {

    private AWSSecretsManager client;
    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() throws Exception {
        client = AWSSecretsManagerClientBuilder.standard()
                .withCredentials(new WebIdentityTokenCredentialsProvider())
                .withRegion(Regions.forName("us-east-1"))
                .build();

        // Set roleArn and roleSessionName using reflection
        setField(client, "roleArn", "yourRoleArn");
        setField(client, "roleSessionName", "yourRoleSessionName");

        objectMapper = new ObjectMapper();
    }

    private void setField(Object object, String fieldName, Object value) throws Exception {
        Field field = AWSSecretsManagerClientBuilder.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(object, value);
    }

    @Test
    public void testGetAwsSecret() {
        // Mock getSecretValueResult
        GetSecretValueResult mockResult = Mockito.mock(GetSecretValueResult.class);
        Mockito.when(mockResult.getResultString()).thenReturn("{\"password\": \"yourPassword\"}");

        // Mock client.getSecretValue()
        Mockito.when(client.getSecretValue(Mockito.any(GetSecretValueRequest.class))).thenReturn(mockResult);

        // Call the method
        AwsSecretsManager awsSecretsManager = new AwsSecretsManager(client, objectMapper);
        String password = awsSecretsManager.getAwsSecret("yourSecretName");

        // Assertion
        assertEquals("yourPassword", password);
    }
}
