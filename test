@Configuration
@Profile("dev")
public class PostgreConfig {

    @Value("${AWS_RDS_SECRET_NAME}")
    private String secretName;

    @Value("${AWS_REGION}")
    private String region;

    @Value("${SPRING_DATASOURCE_DRIVER_CLASS_NAME}")
    private String postgresDriverClassName;

    @Value("${SPRING_DATASOURCE_URL}")
    private String postgresJdbcUrl;

    @Value("${SPRING_DATASOURCE_USERNAME}")
    private String postgresUsername;

    @Value("${ORACLE_DATASOURCE_DRIVER_CLASS_NAME}")
    private String oracleDriverClassName;

    @Value("${ORACLE_DATASOURCE_URL}")
    private String oracleJdbcUrl;

    @Value("${ORACLE_DATASOURCE_USERNAME}")
    private String oracleUsername;

    @Value("${ORACLE_DATASOURCE_PASSWORD}")
    private String oraclePassword;

    @Bean
    @Primary
    @ConfigurationProperties(prefix = "spring.datasource")
    public DataSource postgresDataSource() {
        return DataSourceBuilder.create()
                                 .driverClassName(postgresDriverClassName)
                                 .url(postgresJdbcUrl)
                                 .username(postgresUsername)
                                 .password(getAwsSecret())
                                 .build();
    }

    @Bean
    @ConfigurationProperties(prefix = "oracle.datasource")
    public DataSource oracleDataSource() {
        return DataSourceBuilder.create()
                                 .driverClassName(oracleDriverClassName)
                                 .url(oracleJdbcUrl)
                                 .username(oracleUsername)
                                 .password(oraclePassword)
                                 .build();
    }

    // Other methods as per your requirement

    private String getAwsSecret() {
        // Implementation Omitted
    }
}



import org.springframework.data.repository.Repository;

public interface OwnerRepository extends Repository<Client, Integer> {
    Client save(Client client);
}


import org.springframework.stereotype.Service;

@Service
public class DatabaseRWService {

    private final OwnerRepository postgresRepository;
    private final OwnerOracleRepository oracleRepository;

    public DatabaseRWService(OwnerRepository postgresRepository, OwnerOracleRepository oracleRepository) {
        this.postgresRepository = postgresRepository;
        this.oracleRepository = oracleRepository;
    }

    public void saveToBothDatabases(Client client) {
        postgresRepository.save(client);
        oracleRepository.save(client);
    }
}
